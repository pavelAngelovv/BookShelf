{% extends 'base.html.twig' %}

{% block title %}New Book{% endblock %}

{% block body %}
  <h1>Create a new Book</h1>  

  {{ include('book/_form.html.twig') }}
{% endblock %}

{% block javascripts %}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
  <script src="{{ asset('js/date-picker.js') }}"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Function to add one author field
      const addAuthorField = (container, index) => {
        // Get the prototype of a new author field
        let newAuthor = container.getAttribute('data-prototype');
  
        // Replace "__name__" with a unique index
        newAuthor = newAuthor.replace(/__name__/g, index);
  
        // add label for the added author field
        const newAuthorLabel = document.createElement('label');
        newAuthorLabel.innerHTML = 'Author #' + (index + 1);
        newAuthorLabel.style = 'margin-bottom: 7px;';
  
        // Append the new label to the authors collection container
        container.appendChild(newAuthorLabel);
  
        // Create a div element to hold the new author field
        const div = document.createElement('div');
        div.className = 'author-form';
        div.innerHTML = newAuthor;
  
        // Append the new author field to the authors collection container
        container.appendChild(div);
      };
  
      // Get the authors collection container
      const authorsContainer = document.getElementById('authors-collection');
  
      // Call the function to add one initial author field on page load
      addAuthorField(authorsContainer, 0);
  
      // Add event listener to the "Add Author" button
      const addAuthorButton = document.getElementById('add-author');
      if (addAuthorButton) {
        addAuthorButton.addEventListener('click', () => {
          // Get the current number of author fields
          const index = authorsContainer.getElementsByClassName('author-form').length;
  
          // Call the function to add one author field
          addAuthorField(authorsContainer, index);
  
          // Disable the "Add Author" button if there are 5 fields
          if (index + 1 === 5) {
            addAuthorButton.disabled = true;
          }
          // Enable "Add Author" button if one field is left
          if (authorsContainer.childElementCount > 2) {
            removeAuthorButton.disabled = false;
          }
        });
      }
  
      // Add event listener to the "Remove Author" button
      const removeAuthorButton = document.getElementById('remove-author');
      removeAuthorButton.disabled = true;
  
      if (removeAuthorButton) {
        removeAuthorButton.addEventListener('click', () => {
          // Get the last author field in the container
          const lastAuthorField = authorsContainer.lastElementChild;
  
          // Check if there is at least one author field to remove
          if (lastAuthorField && lastAuthorField.classList.contains('author-form')) {
            // Remove the last author field and its label
            authorsContainer.removeChild(lastAuthorField.previousElementSibling); // Remove label
            authorsContainer.removeChild(lastAuthorField); // Remove author field
          }
          // Disable the "Remove Author" button if there's only one field left
          if (authorsContainer.childElementCount === 2) {
            removeAuthorButton.disabled = true;
          }
  
          // Enable the "Add Author" button when a field is removed
          addAuthorButton.disabled = false;
        });
      }
    });
  </script>
  

{% endblock %}
